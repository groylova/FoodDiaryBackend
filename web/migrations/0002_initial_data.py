# Generated by Django 4.1.6 on 2023-02-15 23:37

from django.db import migrations

scale_data = [
    (1, "Starving", "Starving, no energy, very weak"),
    (2, "Very_hungry", "Very hungry, low energy, weak and dizzy"),
    (3, "Uncomfortably_hungry", "Uncomfortably hungry, distracted, irritable"),
    (4, "Hungry", "Hungry, stomach growling"),
    (5, "Good", "Starting to feel hungry"),
    (6, "Satisfied", "Satisfied, but could eat a little more"),
    (7, "Full", "Full but not uncomfortable"),
    (8, "Overfull", "Overfull, somewhat uncomfortable"),
    (9, "Stuffed", "Stuffed, very uncomfortable"),
    (10, "Extremely_stuffed", "Extremely stuffed, nauseous")
]


def create_scale(apps, schema_editor):
    """Create scale."""
    scale = apps.get_model('web', 'Scale')
    scale_obj = scale.objects.create(
        scale_name="Hunger_Satiety_Scale",
        scale_full_name="Hunger-Satiety Scale",
        min_amount=1,
        max_amount=10,
        step=1,
        better_amount=5,
        default=True
    )
    feeling = apps.get_model('web', 'Feeling')
    for item in scale_data:
        feeling.objects.create(
            scale=scale_obj,
            feeling_name=item[1],
            feeling_full_name=item[2],
            amount=item[0]
        )


def remove_scale(apps, schema_editor):
    """Remove scales."""
    scale = apps.get_model('web', 'Scale')
    feeling = apps.get_model('web', 'Feeling')
    scale.objects.all().delete()
    feeling.objects.all().delete()


def create_pfc_goal(apps, schema_editor):
    """Create pfc_goal."""
    pfc_goal = apps.get_model('web', 'PFC_goal')
    pfc_goal.objects.create(
        pfc_goal_name="Balance",
        protein_percent=20,
        fat_percent=30,
        carb_percent=50,
        default=True
    )


def remove_pfc_goal(apps, schema_editor):
    """Remove pfc_goal."""
    pfc_goal = apps.get_model('web', 'PFC_goal')
    pfc_goal.objects.all().delete()


def create_food_type(apps, schema_editor):
    """Create pfc_goal."""
    initial_food_types = [
        'Cereals and potatoes',
        'Vegetables, fruits and berries',
        'Milk and dairy products',
        'Fish, poultry, meat and eggs',
        'Fats, nuts, seeds, oilseeds',
        'Sugar and sweets, sweet and salty snacks',
        'Soy products',
        'Sauces',
        'Soft drinks',
        'Alcoholic drinks'
    ]
    food_type = apps.get_model('web', 'FoodType')
    for initial_food_type in initial_food_types:
        food_type.objects.create(
            food_type_name=initial_food_type,
            default=True
        )


def remove_food_type(apps, schema_editor):
    """Remove food_type."""
    food_type = apps.get_model('web', 'FoodType')
    food_type.objects.all().delete()


def create_property(apps, schema_editor):
    """Create property."""
    initial_properties = [
        'Cereals', 'Potatoes',
        'Vegetables', 'Fruits' 'Berries',
        'Milk', 'Dairy products',
        'Fish', 'Poultry', 'Meat', 'Eggs',
        'Fats, nuts, seeds, oilseeds',
        'Sugar and sweets, sweet and salty snacks',
        'Soy products',
        'Sauces',
        'Soft drinks',
        'Alcoholic drinks'
    ]
    property_food = apps.get_model('web', 'PropertyFood')
    for initial_prop in initial_properties:
        property_food.objects.create(
            property_name=initial_prop,
            default=True
        )


def remove_property_food(apps, schema_editor):
    """Remove property_food."""
    property_food = apps.get_model('web', 'PropertyFood')
    property_food.objects.all().delete()


def code(apps, schema_editor):
    """Call initial creation."""
    create_scale(apps, schema_editor)
    create_pfc_goal(apps, schema_editor)
    create_food_type(apps, schema_editor)
    create_property(apps, schema_editor)


def reverse_code(apps, schema_editor):
    """Call removing."""
    remove_scale(apps, schema_editor)
    remove_pfc_goal(apps, schema_editor)
    remove_pfc_goal(apps, schema_editor)
    remove_property_food(apps, schema_editor)


class Migration(migrations.Migration):

    dependencies = [
        ('web', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(code=code, reverse_code=reverse_code),
    ]
